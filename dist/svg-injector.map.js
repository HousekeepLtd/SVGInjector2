{"version":3,"sources":["./src/svg-injector.js"],"names":["window","document","SVGInjector","options","instanceCounter","this","init","svgCache","injections","requestQueue","ranScripts","config","env","setFallbackClassNames","removeFallbackClassNames","suffixIdReferences","suffixIdReferencesInStyles","copyAttributes","cloneSymbolAsSVG","doPrefixStyleTags","getClassList","getSpriteIdFromClass","cloneSvg","queueRequest","processRequestQueue","loadSvg","writeDefaultClass","replaceNoSVGClass","onLoadSVG","uniqueClasses","isFunction","isArray","svgElemSetClassName","forEach","setRootLevelElem","addRootLevelElem","SVG_NS","XLINK_NS","DEFAULT_SPRITE_CLASS_NAME","DEFAULT_SPRITE_CLASS_ID_NAME","DEFAULT_FALLBACK_CLASS_NAMES","DEFAULT_REMOVESTYLES_CLASS_NAME","prototype","isLocal","location","protocol","hasSvgSupport","implementation","hasFeature","count","elements","evalScripts","pngFallback","onlyInjectVisiblePart","keepStylesClass","spriteClassName","spriteClassIdName","removeStylesClass","removeAllStyles","fallbackClassName","prefixStyleTags","spritesheetURL","prefixFragIdClass","forceFallbacks","querySelector","inject","onDoneCallback","eachCallback","undefined","length","elementsLoaded","ctx","call","element","injectElement","svg","el","onElementInjectedCallback","spriteId","imgUrl","getAttribute","setAttribute","imgUrlSplitByFId","split","push","fallbackUrl","test","perElementFallback","pop","replace","indexOf","getEnv","getConfig","symbolId","classNames","className","slice","curClassName","idx","fallbackClassNames","idxOfCurClass","curClassNames","classAttribute","curFallbackClassName","join","styleTag","suffix","name","numRefs","textContent","match","newName","definitions","defLen","defIdx","refrences","refLen","refIdx","attrs","attrLen","attrIdx","allLinks","allLinksLen","allLinksIdx","links","linkLen","linkIdx","defs","def","elem","querySelectorAll","id","getAttributeNS","toString","setAttributeNS","svgElemSource","svgElemTarget","attributesToIgnore","curAttr","i","attributes","item","value","svgSymbol","createElementNS","childNodes","child","appendChild","cloneNode","injectCount","regex","origPrefixClassName","newPrefixClassName","srcFileNameArr","regexSearchResult","selectorArr","srcArr","styleTagContent","newContent","prefixSelector","arr","RegExp","exec","trim","tmp","svgToCheck","curClassAttr","classes","curClass","sourceSvg","fragId","svgElem","newSVG","viewBox","viewBoxAttr","symbolAttributesToFind","curClassList","symobolList","setViewboxOnNewSVG","symbolElem","getElementById","SVGSymbolElement","SVGViewElement","selector","Math","abs","parseInt","x","y","SVGSVGElement","prop","removeAttribute","SVGUseElement","referencedSymbol","substr","fragIdClassName","fileName","callback","fragmentId","url","requestQueueElem","len","index","setTimeout","urlArr","fileUrl","pathArr","XMLHttpRequest","httpRequest","onreadystatechange","readyState","status","responseXML","statusText","Document","documentElement","DOMParser","Function","xmlDoc","parser","parseFromString","responseText","e","getElementsByTagName","open","overrideMimeType","send","css","head","style","createElement","type","styleSheet","cssText","createTextNode","noSVGClassName","titleId","descId","ariaHidden","children","curChildElem","SVGDefsElement","SVGTitleElement","SVGDescElement","classMerge","concat","script","scriptType","scripts","scriptsToEval","k","scriptsLen","innerText","removeChild","l","scriptsToEvalLen","styleTags","svgClassList","stylesUntouched","parentNode","replaceChild","list","hash","out","hasOwnProperty","unshift","obj","constructor","apply","Object","newClassNames","curClasses","Array","fn","scope","TypeError","addDefault","existingElem","elemId","firstChild","text","insertBefore","newElem","angular","module","provider","injectorOpts","set","opts","$get","factory","svgInjectorOptions","directive","svgInjectorFactory","cfg","restrict","link","$observe","dataSrc","src","exports","define","amd"],"mappings":"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","file":"./dist/svg-injector.min.js","sourcesContent":["/**\n * SVGInjector v2.0.26 - Fast, caching, dynamic inline SVG DOM injection library\n * https://github.com/flobacher/SVGInjector2\n * forked from:\n * https://github.com/iconic/SVGInjector\n *\n * Copyright (c) 2015 flobacher <flo@digital-fuse.net>\n * @license MIT\n *\n * original Copyright (c) 2014 Waybury <hello@waybury.com>\n * @license MIT\n */\n\n(function(window, document) {\n  'use strict';\n  /**\n   * SVGInjector\n   *\n   * Replace the given elements with their full inline SVG DOM elements.\n   *\n   * :NOTE: We are using get/setAttribute with SVG because the SVG DOM spec differs from HTML DOM and\n   * can return other unexpected object types when trying to directly access svg properties.\n   * ex: \"className\" returns a SVGAnimatedString with the class value found in the \"baseVal\" property,\n   * instead of simple string like with HTML Elements.\n   */\n  var SVGInjector = (function () {\n\n\n    /**\n     * Constructor Function\n     * @param {object} options\n     */\n    function SVGInjector (options) {\n      SVGInjector.instanceCounter++;\n      this.init(options);\n    }\n\n    // - private constants -----------------------------------------\n    var SVG_NS = 'http://www.w3.org/2000/svg';\n    var XLINK_NS = 'http://www.w3.org/1999/xlink';\n    var DEFAULT_SPRITE_CLASS_NAME = 'sprite';\n    var DEFAULT_SPRITE_CLASS_ID_NAME = DEFAULT_SPRITE_CLASS_NAME + '--';\n    var DEFAULT_FALLBACK_CLASS_NAMES = [DEFAULT_SPRITE_CLASS_NAME];\n    var DEFAULT_REMOVESTYLES_CLASS_NAME = 'icon';\n\n    // - private member vars ---------------------------------------\n    var svgCache;\n    var injections;\n    var requestQueue;\n    var ranScripts;\n    var config;\n    var env;\n\n    // - private member funcs --------------------------------------\n    var\n      setFallbackClassNames,\n      removeFallbackClassNames,\n      suffixIdReferences,\n      suffixIdReferencesInStyles,\n      copyAttributes,\n      cloneSymbolAsSVG,\n      doPrefixStyleTags,\n      getClassList,\n      getSpriteIdFromClass,\n      cloneSvg,\n      queueRequest,\n      processRequestQueue,\n      loadSvg,\n      writeDefaultClass,\n      replaceNoSVGClass,\n      onLoadSVG,\n      uniqueClasses,\n      isFunction,\n      isArray,\n      svgElemSetClassName,\n      forEach,\n      setRootLevelElem,\n      addRootLevelElem\n    ;\n\n\n\n    requestQueue = [];\n\n    // - static vars -----------------------------------------------\n    SVGInjector.instanceCounter = 0;\n\n    // - public member vars ----------------------------------------\n    //SVGInjector.prototype.varName = {};\n\n\n\n    // - public member functions ---------------------------------------\n    /**\n     * @param {object} options\n     */\n    SVGInjector.prototype.init = function(options) {\n      options = options || {};\n      svgCache = {};\n      env = {};\n      env.isLocal = window.location.protocol === 'file:';\n      env.hasSvgSupport = document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');\n\n      injections = {\n        count: 0,\n        elements: []\n      };\n\n      ranScripts = {};\n      config = {};\n\n      // Should we run the scripts blocks found in the SVG\n      // 'always' - Run them every time\n      // 'once' - Only run scripts once for each SVG\n      // [false|'never'] - Ignore scripts\n      config.evalScripts = options.evalScripts || 'always';\n\n      // Location of fallback pngs, if desired\n      config.pngFallback = options.pngFallback || false;\n\n      // Only inject the part of the svg, that is specified\n      // as visible through the id of an SVGViewElement\n      // is default mode\n      config.onlyInjectVisiblePart = options.onlyInjectVisiblePart || true;\n\n      config.keepStylesClass  = (typeof options.keepStylesClass === 'undefined') ?\n        '' : options.keepStylesClass;\n\n      config.spriteClassName  = (typeof options.spriteClassName === 'undefined') ?\n        DEFAULT_SPRITE_CLASS_NAME : options.spriteClassName;\n\n      config.spriteClassIdName  = (typeof options.spriteClassIdName === 'undefined') ?\n        DEFAULT_SPRITE_CLASS_ID_NAME : options.spriteClassIdName;\n\n      config.removeStylesClass = (typeof options.removeStylesClass === 'undefined') ?\n        DEFAULT_REMOVESTYLES_CLASS_NAME : options.removeStylesClass;\n\n      config.removeAllStyles = (typeof options.removeAllStyles === 'undefined') ?\n        false : options.removeAllStyles;\n\n      config.fallbackClassName = (typeof options.fallbackClassName === 'undefined') ?\n        DEFAULT_FALLBACK_CLASS_NAMES : options.fallbackClassName;\n\n      config.prefixStyleTags  = (typeof options.prefixStyleTags === 'undefined') ?\n        true : options.prefixStyleTags;\n\n      config.spritesheetURL = (typeof options.spritesheetURL === 'undefined' || options.spritesheetURL === '') ?\n        false : options.spritesheetURL;\n\n      config.prefixFragIdClass = config.spriteClassIdName;\n\n      config.forceFallbacks = (typeof options.forceFallbacks === 'undefined') ?\n        false : options.forceFallbacks;\n\n      if(config.forceFallbacks){\n        env.hasSvgSupport = false;\n      }\n\n      replaceNoSVGClass(document.querySelector('html'), 'no-svg', env.hasSvgSupport);\n\n      if(env.hasSvgSupport && typeof options.removeStylesClass === 'undefined' ){ // user does not want to use his own custom class -> write this style tag\n        writeDefaultClass(config.removeStylesClass);\n      }\n    };\n\n    /**\n     * Inject 1+ elements\n     * @param {elements} Array of or single DOM element\n     * @param {function} onDoneCallback\n     * @param {function} eachCallback\n     */\n    SVGInjector.prototype.inject = function(elements, onDoneCallback, eachCallback) {\n      if (elements.length !== undefined) {\n        var elementsLoaded = 0;\n        var ctx = this;\n        forEach.call(elements, function (element) {\n          ctx.injectElement(element, function (svg) {\n            if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);\n            if (onDoneCallback && elements.length === ++elementsLoaded) onDoneCallback(elementsLoaded);\n          });\n        });\n      }\n      else {\n        if (elements) {\n          this.injectElement(elements, function (svg) {\n            if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);\n            if (onDoneCallback) onDoneCallback(1);\n            elements = null;\n          });\n        }\n        else {\n          if (onDoneCallback) onDoneCallback(0);\n        }\n      }\n    };\n\n\n    /**\n     * Inject a single element\n     * @param {elements} Array of or single DOM element\n     * @param {function} onDoneCallback\n     * @param {function} eachCallback\n     */\n    SVGInjector.prototype.injectElement = function (el, onElementInjectedCallback) {\n      var imgUrl = el.getAttribute('data-src') || el.getAttribute('src'),\n          spriteId;\n\n      if (!imgUrl) {\n        if (config.spritesheetURL) {\n          spriteId = getSpriteIdFromClass(el);\n          if (spriteId === '') {\n            // console.warn('neither data-src nor spriteId class found! Nothing to inject here!');\n            return;\n          }\n          imgUrl = config.spritesheetURL + '#' + spriteId;\n          // console.log('imgURL: ' + imgUrl);\n        } else {\n          // console.warn('neither data-src nor spritesheetURL specified! Nothing to inject here!');\n          return;\n        }\n      }\n\n      el.setAttribute('data-src', imgUrl);\n\n      var imgUrlSplitByFId = imgUrl.split('#');\n      if (imgUrlSplitByFId.length === 1) {\n        imgUrlSplitByFId.push('');\n      }\n\n      var fallbackUrl;\n\n      // We can only inject SVG\n      if (!(/\\.svg/i).test(imgUrl)) {\n        onElementInjectedCallback('Attempted to inject a file with a non-svg extension: ' + imgUrl);\n        return;\n      }\n\n\n      if (env.hasSvgSupport) {\n        if (isArray(config.fallbackClassName)) {\n          removeFallbackClassNames(el, imgUrlSplitByFId[1], config.fallbackClassName);\n        }\n      }\n      else {\n        // If we don't have SVG support try to fall back to a png,\n        // either defined per-element via data-fallback or data-png,\n        // or globally via the pngFallback directory setting\n\n        var perElementFallback = el.getAttribute('data-fallback') || el.getAttribute('data-png');\n\n        // Per-element specific PNG fallback defined, so use that\n        if (perElementFallback) {\n          el.setAttribute('src', perElementFallback);\n          onElementInjectedCallback(null);\n        }\n        // Global PNG fallback directory defined, use the same-named PNG\n        else if (config.pngFallback) {\n\n          if (imgUrlSplitByFId.length > 1 && imgUrlSplitByFId[1]) {\n            fallbackUrl = imgUrlSplitByFId[1] + '.png';\n            if (isArray(config.fallbackClassName)) {\n              setFallbackClassNames(el, imgUrlSplitByFId[1], config.fallbackClassName);\n            }\n            else if (isFunction(config.fallbackClassName)) {\n              // console.info('custom function to create fallbackClassName');\n              config.fallbackClassName(el, imgUrlSplitByFId[1]);\n            }\n            else if (typeof config.fallbackClassName === 'string') {\n              svgElemSetClassName(el, config.fallbackClassName);\n            }\n            else {\n              el.setAttribute('src', config.pngFallback + '/' + fallbackUrl);\n            }\n          }\n          else {\n            fallbackUrl = imgUrl.split('/').pop().replace('.svg', '.png');\n            el.setAttribute('src', config.pngFallback + '/' + fallbackUrl);\n          }\n\n          onElementInjectedCallback(null);\n        }\n        // um...\n        else {\n          onElementInjectedCallback('This browser does not support SVG and no PNG fallback was defined.');\n        }\n\n        return;\n      }\n\n      // Make sure we aren't already in the process of injecting this element to\n      // avoid a race condition if multiple injections for the same element are run.\n      // :NOTE: Using indexOf() only _after_ we check for SVG support and bail,\n      // so no need for IE8 indexOf() polyfill\n      if (injections.elements.indexOf(el) !== -1) {\n        console.warn('race', el);\n        return;\n      }\n\n      // Remember the request to inject this element, in case other injection\n      // calls are also trying to replace this element before we finish\n      injections.elements.push(el);\n\n      // Try to avoid loading the orginal image src if possible.\n      // el.setAttribute('src', '');\n\n      // Load it up\n      loadSvg(onElementInjectedCallback, imgUrl, el);\n\n    };\n\n    SVGInjector.prototype.getEnv = function() {\n      return env;\n    };\n\n    SVGInjector.prototype.getConfig = function() {\n      return config;\n    };\n\n    // - private member functions -----------------------------------------------\n    setFallbackClassNames = function (element, symbolId, classNames) {\n      var className =  (typeof classNames === 'undefined') ? DEFAULT_FALLBACK_CLASS_NAMES : classNames.slice(0);\n\n      // replace %s by symbolId\n      forEach.call(\n        className,\n        function(curClassName, idx) {\n          className[idx] = curClassName.replace('%s', symbolId);\n        }\n      );\n\n      svgElemSetClassName(element, className);\n    };\n\n    removeFallbackClassNames = function (element, symbolId, fallbackClassNames) {\n      fallbackClassNames =  (typeof fallbackClassNames === 'undefined') ? DEFAULT_FALLBACK_CLASS_NAMES.slice(0) : fallbackClassNames.slice(0);\n\n      var idxOfCurClass,\n          curClassNames,\n          classAttribute = element.getAttribute('class');\n\n      if (typeof classAttribute === 'undefined' || classAttribute === null) {\n        return;\n      }\n\n      curClassNames = classAttribute.split(' ');\n      if (curClassNames) {\n        // replace %s by symbolId\n        forEach.call(\n          fallbackClassNames,\n          function(curFallbackClassName) {\n            curFallbackClassName = curFallbackClassName.replace('%s', symbolId);\n            idxOfCurClass = curClassNames.indexOf(curFallbackClassName);\n            if( idxOfCurClass >= 0 ){\n              // console.log('remove class ' + curClassName);\n              curClassNames[idxOfCurClass] = '';\n            }\n\n          }\n        );\n\n        element.setAttribute('class', uniqueClasses(curClassNames.join(' ')));\n      }\n\n    };\n\n    suffixIdReferencesInStyles = function (styleTag, suffix, svg, name) {\n      //var referencedIds = styleTag.textContent.match(/url\\(('|\")*#.+('|\")*\\)/g) || [];\n      /*referencedIds.forEach(function (elem, idx, arr) {\n        //elem =  elem.replace(/url\\(('|\")*#/g, '');\n        arr[idx] = elem.replace(/\\)/g, '-' + suffix + ')');\n        console.log('style', arr[idx]);\n      });\n      */\n      var numRefs = 0;\n      styleTag.textContent = styleTag.textContent.replace(/url\\(('|\")*#.+('|\")*(?=\\))/g, function (match) {\n        //console.log('match', match + '-' + suffix);\n        numRefs++;\n        return match + '-' + suffix;\n      });\n      return numRefs;\n    };\n\n    suffixIdReferences = function (svg, suffix) {\n      var defs = [\n        {def:'linearGradient',  attrs: ['fill', 'stroke']},\n        {def:'radialGradient',  attrs: ['fill', 'stroke']},\n        {def:'clipPath',        attrs: ['clip-path']},\n        {def:'mask',            attrs: ['mask']},\n        {def:'filter',          attrs: ['filter']},\n        {def:'color-profile',   attrs: ['color-profile']},\n        {def:'cursor',          attrs: ['cursor']},\n        {def:'marker',          attrs: ['marker', 'marker-start', 'marker-mid', 'marker-end']}\n      ];\n\n      var newName,\n          definitions,\n          defLen,\n          defIdx,\n          refrences,\n          refLen,\n          refIdx,\n          attrs,\n          attrLen,\n          attrIdx,\n          allLinks,\n          allLinksLen,\n          allLinksIdx,\n          links,\n          linkLen,\n          linkIdx\n        ;\n\n      forEach.call(defs, function(elem) {\n\n        definitions = svg.querySelectorAll(elem.def + '[id]');\n        for (defIdx = 0, defLen = definitions.length; defIdx < defLen; defIdx++) {\n          newName = definitions[defIdx].id + '-' + suffix;\n\n          attrs = elem.attrs;\n          for (attrIdx = 0, attrLen = attrs.length; attrIdx < attrLen; attrIdx++) {\n\n            // console.log('suffixxed ' + attribute + ': ' + newName);\n            // :NOTE: using a substring match attr selector here to deal with IE \"adding extra quotes in url() attrs\"\n            refrences = svg.querySelectorAll('[' + attrs[attrIdx] + '=\"url(#' + definitions[defIdx].id + ')\"]');\n            for (refIdx = 0, refLen = refrences.length; refIdx < refLen; refIdx++) {\n              // console.log('set url', newName);\n              refrences[refIdx].setAttribute(attrs[attrIdx], 'url(#' + newName + ')');\n            }\n          }\n\n          // handle xlink:refrences\n          // :NOTE: IE does not like the easy way:  links = svg.querySelectorAll('[*|href=\"#' + definitions[defIdx].id + '\"]');\n          allLinks = svg.querySelectorAll('[*|href]');\n          links = [];\n          for (allLinksIdx = 0, allLinksLen = allLinks.length; allLinksIdx < allLinksLen; allLinksIdx++) {\n            if (allLinks[allLinksIdx].getAttributeNS(XLINK_NS, 'href').toString() === '#' + definitions[defIdx].id ) {\n              links.push(allLinks[allLinksIdx]);\n            }\n          }\n\n          for (linkIdx = 0, linkLen = links.length; linkIdx < linkLen; linkIdx++) {\n            links[linkIdx].setAttributeNS(XLINK_NS, 'href', '#' + newName);\n            // console.log('set link', newName, links[linkIdx]);\n          }\n          definitions[defIdx].id = newName;\n        }\n      });\n    };\n\n    copyAttributes = function (svgElemSource, svgElemTarget, attributesToIgnore) {\n      var curAttr;\n      if (typeof attributesToIgnore === 'undefined') { attributesToIgnore = ['id', 'viewBox']; }\n\n      for(var i=0; i<svgElemSource.attributes.length; i++) {\n        curAttr = svgElemSource.attributes.item(i);\n        if (attributesToIgnore.indexOf(curAttr.name) < 0) {\n          svgElemTarget.setAttribute(curAttr.name, curAttr.value);\n        }\n      }\n    };\n\n    cloneSymbolAsSVG = function (svgSymbol) {\n      var svg = document.createElementNS(SVG_NS, 'svg');\n      forEach.call(svgSymbol.childNodes, function(child){\n\n        svg.appendChild(child.cloneNode(true));\n\n      });\n      copyAttributes(svgSymbol, svg);\n      return svg;\n    };\n\n\n\n    doPrefixStyleTags = function (styleTag, injectCount, svg){\n      var srcArr = svg.getAttribute('data-src').split('#');\n      var regex,\n          origPrefixClassName,\n          newPrefixClassName,\n          srcFileNameArr,\n          regexSearchResult,\n          styleTagContent = styleTag.textContent,\n          newContent = '',\n          selectorArr,\n          prefixSelector = function(elem, idx, arr){\n            arr[idx] = '.' + newPrefixClassName + ' ' + elem;\n          },\n          stylerule = '';\n\n      if(srcArr.length > 1) {\n        origPrefixClassName = srcArr[1];\n        newPrefixClassName = origPrefixClassName + '-' + injectCount;\n        regex = new RegExp('\\\\.' + origPrefixClassName + ' ', 'g');\n        styleTag.textContent = styleTagContent.replace(regex, '.' + newPrefixClassName + ' ');\n      }\n      else { //inject a single element.. this has most probaly not gone through preprocessing\n        srcFileNameArr = srcArr[0].split('/');\n        newPrefixClassName = srcFileNameArr[srcFileNameArr.length-1].replace('.svg', '') + '-' + injectCount;\n        // console.info('inject complete file: ' + srcArr[0]);\n        //https://medium.com/jotform-form-builder/writing-a-css-parser-in-javascript-3ecaa1719a43\n        regex = new RegExp('([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)}', 'g');\n\n        while ((regexSearchResult = regex.exec(styleTagContent)) !== null) {\n          selectorArr = regexSearchResult[1].trim().split(', ');\n          selectorArr.forEach(prefixSelector);\n\n          var tmp =  selectorArr.join(', ') + '{' + regexSearchResult[2] + '}\\n';\n          newContent += tmp;\n        }\n        styleTag.textContent = newContent;\n      }\n\n      svg.setAttribute('class', (svg.getAttribute('class') + ' ' + newPrefixClassName));\n    };\n\n    getClassList = function (svgToCheck) {\n      var curClassAttr = svgToCheck.getAttribute('class');\n      return (curClassAttr) ? curClassAttr.trim().split(' ') : [];\n    };\n\n    getSpriteIdFromClass = function (element) {\n      var classes = getClassList(element);\n      var id = '';\n      forEach.call(classes, function (curClass) {\n        if(curClass.indexOf(config.spriteClassIdName) >= 0) {\n          id = curClass.replace(config.spriteClassIdName, '');\n          // console.log('class with prefix ' + config.spriteClassIdName + ' found. id: ' + id);\n        }\n      });\n      return id;\n    };\n\n    cloneSvg = function (config, sourceSvg, fragId) {\n\n      var svgElem,\n        newSVG,\n        viewBox,\n        viewBoxAttr,\n        symbolAttributesToFind,\n        curClassList,\n        setViewboxOnNewSVG = false,\n        symbolElem = null,\n        symobolList;\n\n      if(fragId === undefined){\n        return sourceSvg.cloneNode(true);\n      }\n      else {\n        svgElem = sourceSvg.getElementById(fragId);\n        if(!svgElem){\n          console.warn(fragId + ' not found in svg', sourceSvg);\n          return;\n        }\n\n        viewBoxAttr = svgElem.getAttribute('viewBox');\n        viewBox = viewBoxAttr.split(' ');\n\n        if (svgElem instanceof SVGSymbolElement) {\n\n          newSVG = cloneSymbolAsSVG(svgElem);\n          setViewboxOnNewSVG = true;\n\n        }\n        else if (svgElem instanceof SVGViewElement) {\n          symbolElem = null;\n          if (config.onlyInjectVisiblePart) {\n            var selector = '*[width=\"' + viewBox[2] + '\"][height=\"' + viewBox[3] + '\"]';\n\n            symbolAttributesToFind = {};\n            if (Math.abs(parseInt(viewBox[0])) === 0) {\n              selector += ':not([x])';\n            }\n            else {\n              symbolAttributesToFind.x = viewBox[0];\n              selector += '[x=\"' + viewBox[0] + '\"]';\n            }\n\n            if (Math.abs(parseInt(viewBox[1])) === 0) {\n              selector += ':not([y])';\n            }\n            else {\n              symbolAttributesToFind.y = viewBox[1];\n              selector += '[y=\"' + viewBox[1] + '\"]';\n            }\n            symobolList = sourceSvg.querySelectorAll(selector);\n            if (symobolList.length > 1) {\n              console.warn('more than one item, with the matching viewbox found!', symobolList);\n            }\n            symbolElem = symobolList[0];\n          }\n          if (symbolElem && (symbolElem instanceof SVGSVGElement)) {\n            newSVG = symbolElem.cloneNode(true);\n\n            for (var prop in symbolAttributesToFind) {\n              if (prop !== 'width' && prop !== 'height') {\n                newSVG.removeAttribute(prop);\n              }\n            }\n          }\n          else if(symbolElem && (symbolElem instanceof SVGUseElement)) {\n            // console.log('referenced view shows a SVGUseElement');\n            var referencedSymbol = sourceSvg.getElementById(\n              symbolElem.getAttributeNS(XLINK_NS, 'href').substr(1)\n            );\n            newSVG = cloneSymbolAsSVG(referencedSymbol);\n            viewBoxAttr = referencedSymbol.getAttribute('viewBox');\n            viewBox = viewBoxAttr.split(' ');\n            setViewboxOnNewSVG = true;\n          }\n          else {\n            console.info(\n              ((config.onlyInjectVisiblePart) ? 'symbol referenced via view' + fragId + ' not found' : 'option.onlyInjectVisiblePart: false') + ' -> clone complete svg!'\n            );\n            setViewboxOnNewSVG = true;\n            newSVG = sourceSvg.cloneNode(true);\n\n          }\n        }\n\n        if (setViewboxOnNewSVG) {\n          newSVG.setAttribute('viewBox', viewBox.join(' '));\n          newSVG.setAttribute('width', viewBox[2]+'px');\n          newSVG.setAttribute('height', viewBox[3]+'px');\n        }\n        newSVG.setAttribute('xmlns', SVG_NS);\n        newSVG.setAttribute('xmlns:xlink', XLINK_NS);\n        //curClassAttr = newSVG.getAttribute('class');\n        curClassList = getClassList(newSVG);\n        var fragIdClassName = config.prefixFragIdClass + fragId;\n        if (curClassList.indexOf(fragIdClassName)<0) {\n          curClassList.push(fragIdClassName);\n          newSVG.setAttribute('class', curClassList.join(' '));\n        }\n        return newSVG;\n      }\n\n    };\n\n    //queueRequest(requestQueue, fileName, fragId, onElementInjectedCallback, el);\n    queueRequest = function (fileName, fragId, callback, el) {\n      requestQueue[fileName] = requestQueue[fileName] || [];\n      requestQueue[fileName].push({callback:callback, fragmentId:fragId, element:el, name: name});\n    };\n\n    processRequestQueue = function (url) {\n      var requestQueueElem;\n      for (var i = 0, len = requestQueue[url].length; i < len; i++) {\n        // Make these calls async so we avoid blocking the page/renderer\n        /* jshint loopfunc: true */\n        (function (index) {\n          setTimeout(function () {\n            requestQueueElem = requestQueue[url][index];\n            onLoadSVG(url, requestQueueElem.fragmentId, requestQueueElem.callback, requestQueueElem.element, requestQueueElem.name);\n          }, 0);\n        })(i);\n        /* jshint loopfunc: false */\n      }\n    };\n\n    loadSvg = function (onElementInjectedCallback, url, el) {\n      var urlArr, fileUrl, fragId, name, pathArr;\n      //var state = {onElementInjectedCallback:onElementInjectedCallback, injections:injections, config:config, url:url, el:el, ranScripts:ranScripts};\n      // console.log('loadSvg', url);\n      urlArr = url.split('#');\n      fileUrl = urlArr[0];\n      fragId = (urlArr.length === 2) ? urlArr[1] : undefined;\n      //name = fragId ? undefined : ;\n      if (typeof fragId !== 'undefined') {\n        pathArr = fileUrl.split('/');\n        name = pathArr[pathArr.length-1].replace('.svg', '');\n      }\n\n      if (svgCache[fileUrl] !== undefined) {\n        if (svgCache[fileUrl] instanceof SVGSVGElement) {\n          // We already have it in cache, so use it\n          // console.log('We already have it in cache, so use it', fileName, fragId);\n          onLoadSVG(fileUrl, fragId, onElementInjectedCallback, el, name);\n        }\n        else {\n          // console.log('We don\\'t have it in cache yet, but we are loading it, so queue this request', fileName, fragId);\n          // We don't have it in cache yet, but we are loading it, so queue this request\n          queueRequest(fileUrl, fragId, onElementInjectedCallback, el, name);\n        }\n      }\n      else {\n\n        if (!window.XMLHttpRequest) {\n          onElementInjectedCallback('Browser does not support XMLHttpRequest');\n          return false;\n        }\n\n        // Seed the cache to indicate we are loading this URL already\n        svgCache[fileUrl] = {};\n        queueRequest(fileUrl, fragId, onElementInjectedCallback, el, name);\n\n        var httpRequest = new XMLHttpRequest();\n\n        httpRequest.onreadystatechange = function () {\n          // readyState 4 = complete\n          if (httpRequest.readyState === 4) {\n\n            // Handle status\n            if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n              onElementInjectedCallback('Unable to load SVG file: ' + fileUrl);\n\n              // @check this!\n              //if (env.isLocal) {\n              //  onLoadCompleteCb('Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.');\n              //}\n              //\n              //onLoadCompleteCb();\n              return false;\n            }\n\n            // 200 success from server, or 0 when using file:// protocol locally\n            if (httpRequest.status === 200 || (env.isLocal && httpRequest.status === 0)) {\n\n              if (httpRequest.responseXML instanceof Document) {\n                // Cache it\n                svgCache[fileUrl] = httpRequest.responseXML.documentElement;\n              }\n\n              // IE9 doesn't create a responseXML Document object from loaded SVG,\n              // and throws a \"DOM Exception: HIERARCHY_REQUEST_ERR (3)\" error when injected.\n              //\n              // So, we'll just create our own manually via the DOMParser using\n              // the the raw XML responseText.\n              //\n              // :NOTE: IE8 and older doesn't have DOMParser, but they can't do SVG either, so...\n              else if (DOMParser && (DOMParser instanceof Function)) {\n                var xmlDoc;\n                try {\n                  var parser = new DOMParser();\n                  xmlDoc = parser.parseFromString(httpRequest.responseText, 'text/xml');\n                }\n                catch (e) {\n                  xmlDoc = undefined;\n                }\n\n                if (!xmlDoc || xmlDoc.getElementsByTagName('parsererror').length) {\n                  onElementInjectedCallback('Unable to parse SVG file: ' + url);\n                  return false;\n                }\n                else {\n                  // Cache it\n                  svgCache[fileUrl] = xmlDoc.documentElement;\n                }\n              }\n\n              // We've loaded a new asset, so process any requests waiting for it\n              processRequestQueue(fileUrl);\n            }\n            else {\n              onElementInjectedCallback('There was a problem injecting the SVG: ' + httpRequest.status + ' ' + httpRequest.statusText);\n              return false;\n            }\n          }\n        };\n\n        httpRequest.open('GET', fileUrl);\n\n        // Treat and parse the response as XML, even if the\n        // server sends us a different mimetype>\n        if (httpRequest.overrideMimeType) httpRequest.overrideMimeType('text/xml');\n\n        httpRequest.send();\n      }\n    };\n\n    writeDefaultClass = function(removeStylesClass) {\n      var css = 'svg.' + removeStylesClass + ' {fill: currentColor;}',\n        head = document.head || document.getElementsByTagName('head')[0],\n        style = document.createElement('style');\n\n      style.type = 'text/css';\n      if (style.styleSheet){\n        style.styleSheet.cssText = css;\n      }\n      else {\n        style.appendChild(document.createTextNode(css));\n      }\n      head.appendChild(style);\n      // console.info( 'default class written: ', css );\n    };\n\n    replaceNoSVGClass = function(element, noSVGClassName, hasSvgSupport) {\n      if(hasSvgSupport) {\n        element.className.replace(noSVGClassName, '');\n      }\n      else{\n        element.className += ' ' + noSVGClassName;\n      }\n    };\n\n\n    onLoadSVG = function(url, fragmentId, onElementInjectedCallback, el, name){\n      // console.log('onLoadSVG', url, fragmentId, onElementInjectedCallback, el, name);\n      var svg,\n          imgId,\n          titleId,\n          descId,\n          ariaHidden;\n\n      svg = cloneSvg(config, svgCache[url], fragmentId);\n      if (typeof svg === 'undefined' || typeof svg === 'string') {\n        onElementInjectedCallback(svg);\n        return false;\n      }\n\n      // take care of accessibility\n      svg.setAttribute('role', 'img');\n      forEach.call(svg.children || [], function (curChildElem) { // IE does not support Children on SVGElement!\n        if (\n          !(curChildElem instanceof SVGDefsElement) &&\n          !(curChildElem instanceof SVGTitleElement) &&\n          !(curChildElem instanceof SVGDescElement)\n        ) {\n          curChildElem.setAttribute('role', 'presentation');\n        }\n      });\n\n\n      // set aria-hidden attribute\n      ariaHidden = el.getAttribute('aria-hidden') || svg.getAttribute('aria-hidden');\n\n      // set desc + title\n      descId = setRootLevelElem('desc', svg, el, fragmentId, name, !ariaHidden);\n      titleId = setRootLevelElem('title', svg, el, fragmentId, name, !ariaHidden);\n      if (ariaHidden) {\n        svg.setAttribute('aria-hidden', 'true');\n      } else {\n        svg.setAttribute('aria-labelledby', titleId + ' ' + descId);\n      }\n\n      // copy attributes of original element to new svg excluding class\n      copyAttributes(el, svg, ['class']);\n\n\n      // Concat the SVG classes + 'injected-svg' + the img classes\n      var classMerge = [].concat(svg.getAttribute('class') || [], 'injected-svg', el.getAttribute('class') || []).join(' ');\n      svg.setAttribute('class', uniqueClasses(classMerge));\n\n      // Make sure any internally referenced ids and their\n      // references are unique.\n      //\n      // This addresses the issue of having multiple instances of the\n      // same SVG on a page and only the first clipPath, gradient, mask or filter id is referenced.\n      suffixIdReferences(svg, injections.count, name);\n\n\n      // Remove any unwanted/invalid namespaces that might have been added by SVG editing tools\n      svg.removeAttribute('xmlns:a');\n\n      // Post page load injected SVGs don't automatically have their script\n      // elements run, so we'll need to make that happen, if requested\n\n      // Find then prune the scripts\n      var scripts = svg.querySelectorAll('script');\n      var scriptsToEval = [];\n      var script, scriptType;\n\n      for (var k = 0, scriptsLen = scripts.length; k < scriptsLen; k++) {\n        scriptType = scripts[k].getAttribute('type');\n\n        // Only process javascript types.\n        // SVG defaults to 'application/ecmascript' for unset types\n        if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {\n\n          // innerText for IE, textContent for other browsers\n          script = scripts[k].innerText || scripts[k].textContent;\n\n          // Stash\n          scriptsToEval.push(script);\n\n          // Tidy up and remove the script element since we don't need it anymore\n          svg.removeChild(scripts[k]);\n        }\n      }\n\n      // Run/Eval the scripts if needed\n      if (scriptsToEval.length > 0 && (config.evalScripts === 'always' || (config.evalScripts === 'once' && ! ranScripts[url]))) {\n        for (var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++) {\n\n          // :NOTE: Yup, this is a form of eval, but it is being used to eval code\n          // the caller has explictely asked to be loaded, and the code is in a caller\n          // defined SVG file... not raw user input.\n          //\n          // Also, the code is evaluated in a closure and not in the global scope.\n          // If you need to put something in global scope, use 'window'\n          new Function(scriptsToEval[l])(window); // jshint ignore:line\n        }\n\n        // Remember we already ran scripts for this svg\n        ranScripts[url] = true;\n      }\n\n      // :NOTE: handle styles in style-tags\n      var styleTags = svg.querySelectorAll('style');\n\n      forEach.call(styleTags, function (styleTag) {\n        var svgClassList = getClassList(svg),\n          stylesUntouched = true;\n        if ((svgClassList.indexOf(config.removeStylesClass)>=0 || config.removeAllStyles) && (svgClassList.indexOf(config.keepStylesClass)<0) ) {\n\n          // remove the styletag if the removeStylesClass is applied to the SVG\n          // console.log('remove styleTag', styleTag);\n          styleTag.parentNode.removeChild(styleTag);\n        }\n        else {\n\n          if (suffixIdReferencesInStyles(styleTag, injections.count, svg, name) > 0) {\n            stylesUntouched = false;\n          }\n\n          if (config.prefixStyleTags){\n            doPrefixStyleTags(styleTag, injections.count, svg, name);\n            stylesUntouched = false;\n          }\n\n          if (stylesUntouched) {\n            // :WORKAROUND:\n            // IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.\n            // This trick will trigger IE to read and use any existing SVG <style> tags.\n            //\n            // Reference: https://github.com/iconic/SVGInjector/issues/23\n            styleTag.textContent += '';\n          }\n\n        }\n\n      });\n\n      // Replace the image with the svg\n      el.parentNode.replaceChild(svg, el);\n\n      // Now that we no longer need it, drop references\n      // to the original element so it can be GC'd\n      delete injections.elements[injections.elements.indexOf(el)];\n      //el = null;\n\n      // Increment the injected count\n      injections.count++;\n\n      onElementInjectedCallback(svg);\n    };\n\n    //- general helper functions ------------------------------------------------\n\n  //var toCamelCase = function(str) {\n  //  return str.replace(/^([A-Z])|[-_](\\w)/g, function(match, p1, p2, offset) {\n  //    if (p2) return p2.toUpperCase();\n  //    return p1.toLowerCase();\n  //  });\n  //}\n\n    uniqueClasses = function(list) {\n      list = list.split(' ');\n\n      var hash = {};\n      var i = list.length;\n      var out = [];\n\n      while (i--) {\n        if (!hash.hasOwnProperty(list[i])) {\n          hash[list[i]] = 1;\n          out.unshift(list[i]);\n        }\n      }\n      return out.join(' ');\n    };\n\n    isFunction = function(obj) {\n      return !!(obj && obj.constructor && obj.call && obj.apply);\n    };\n\n    isArray = function(obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    svgElemSetClassName = function(el, newClassNames){\n      var curClasses = el.getAttribute('class');\n      curClasses = curClasses ? curClasses : '';\n\n      if(isArray(newClassNames)) {\n        newClassNames = newClassNames.join(' ');\n      }\n\n      newClassNames = curClasses + ' ' + newClassNames;\n\n      el.setAttribute('class', uniqueClasses(newClassNames));\n    };\n\n    /**\n     * cache (or polyfill for <= IE8) Array.forEach()\n     * source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n     */\n    forEach = Array.prototype.forEach || function (fn, scope) {\n      if (this === void 0 || this === null || typeof fn !== 'function') {\n        throw new TypeError();\n      }\n\n      /* jshint bitwise: false */\n      var i, len = this.length >>> 0;\n      /* jshint bitwise: true */\n\n      for (i = 0; i < len; ++i) {\n        if (i in this) {\n          fn.call(scope, this[i], i, this);\n        }\n      }\n    };\n\n    setRootLevelElem = function (type, svg, el, fragmentId, addDefault) {\n      var\n        elemId = fragmentId ? fragmentId + '-' : '',\n        existingElem\n      ;\n      elemId += type + '-' + injections.count;\n\n      existingElem = el.querySelector(type);\n      if (existingElem) { // element exists in the injection target\n        addRootLevelElem(type, svg, existingElem.textContent, elemId, svg.firstChild);\n      } else {\n        existingElem = svg.querySelector(type);\n        if (existingElem) { // element exists in the svg to inject, only update its id\n          existingElem.setAttribute('id', elemId);\n        } else {\n\n          if (addDefault) {\n            // neither injection target nor the svg to inject contain this element -> create with default content\n            addRootLevelElem(type, svg, fragmentId, elemId, svg.firstChild);\n          } else {\n            elemId = '';\n          }\n        }\n      }\n      return elemId;\n    };\n\n    addRootLevelElem = function (type, svg, text, id, insertBefore) {\n      var newElem,\n          existingElem = svg.querySelector(type);\n\n      if (existingElem) { // remove\n        existingElem.parentNode.removeChild(existingElem);\n      }\n\n      newElem = document.createElementNS(SVG_NS, type);\n      newElem.appendChild(document.createTextNode(text));\n      newElem.setAttribute('id', id);\n\n      svg.insertBefore(newElem, insertBefore);\n\n      return newElem;\n    };\n\n    return SVGInjector;\n  })();\n\n  if (typeof angular === 'object') {\n    // use with angular\n    angular\n      .module('svginjector', [])\n      .provider('svgInjectorOptions', function() {\n        var injectorOpts = {};\n        return {\n          set: function (opts) {\n            injectorOpts = opts;\n          },\n          $get: function () {\n            return injectorOpts;\n          }\n        };\n      })\n      .factory('svgInjectorFactory', ['svgInjectorOptions', function (svgInjectorOptions) {\n        return new SVGInjector(svgInjectorOptions);\n      }])\n      .directive('svg', ['svgInjectorFactory', function(svgInjectorFactory) {\n        var cfg = svgInjectorFactory.getConfig();\n        return {\n          restrict: 'E',\n          link: function (scope, element, attrs) {\n            // var attrToObserve;\n            if (attrs['class'] && attrs['class'].indexOf(cfg.spriteClassIdName) >= 0) {\n              attrs.$observe('class', function() {\n                svgInjectorFactory.inject(element[0]);\n              });\n            } else if (attrs.dataSrc || attrs.src) {\n              // attrToObserve = (attrs.dataSrc) ? 'dataSrc' : 'src';\n              // attrs.$observe(attrToObserve, function() {\n              svgInjectorFactory.inject(element[0]);\n              // });\n            }\n\n          }\n        };\n      }])\n    ;\n  }\n  else{\n    // use standalone -> UMD\n\n    // Node.js or CommonJS\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n      module.exports = SVGInjector;\n    }\n    // AMD support\n    else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return SVGInjector;\n      });\n    }\n    // Otherwise, attach to window as global\n    else if (typeof window === 'object') {\n      window.SVGInjector = SVGInjector;\n    }\n  }\n}(window, document));\n"]}